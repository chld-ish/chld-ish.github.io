/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function() {
    var settingsElement = document.querySelector('head > script[type="application/json"][data-drupal-selector="drupal-settings-json"], body > script[type="application/json"][data-drupal-selector="drupal-settings-json"]');
    window.drupalSettings = {};
    if (settingsElement !== null) {
        window.drupalSettings = JSON.parse(settingsElement.textContent);
    }
})();
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
window.Drupal = {
    behaviors: {},
    locale: {}
};
(function(Drupal, drupalSettings, drupalTranslations, console, Proxy, Reflect) {
    Drupal.throwError = function(error) {
        setTimeout(function() {
            throw error;
        }, 0);
    };
    Drupal.attachBehaviors = function(context, settings) {
        context = context || document;
        settings = settings || drupalSettings;
        var behaviors = Drupal.behaviors;
        Object.keys(behaviors || {}).forEach(function(i) {
            if (typeof behaviors[i].attach === 'function') {
                try {
                    behaviors[i].attach(context, settings);
                } catch (e) {
                    Drupal.throwError(e);
                }
            }
        });
    };
    Drupal.detachBehaviors = function(context, settings, trigger) {
        context = context || document;
        settings = settings || drupalSettings;
        trigger = trigger || 'unload';
        var behaviors = Drupal.behaviors;
        Object.keys(behaviors || {}).forEach(function(i) {
            if (typeof behaviors[i].detach === 'function') {
                try {
                    behaviors[i].detach(context, settings, trigger);
                } catch (e) {
                    Drupal.throwError(e);
                }
            }
        });
    };
    Drupal.checkPlain = function(str) {
        str = str.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
        return str;
    };
    Drupal.formatString = function(str, args) {
        var processedArgs = {};
        Object.keys(args || {}).forEach(function(key) {
            switch (key.charAt(0)) {
            case '@':
                processedArgs[key] = Drupal.checkPlain(args[key]);
                break;
            case '!':
                processedArgs[key] = args[key];
                break;
            default:
                processedArgs[key] = Drupal.theme('placeholder', args[key]);
                break;
            }
        });
        return Drupal.stringReplace(str, processedArgs, null);
    };
    Drupal.stringReplace = function(str, args, keys) {
        if (str.length === 0) {
            return str;
        }
        if (!Array.isArray(keys)) {
            keys = Object.keys(args || {});
            keys.sort(function(a, b) {
                return a.length - b.length;
            });
        }
        if (keys.length === 0) {
            return str;
        }
        var key = keys.pop();
        var fragments = str.split(key);
        if (keys.length) {
            for (var i = 0; i < fragments.length; i++) {
                fragments[i] = Drupal.stringReplace(fragments[i], args, keys.slice(0));
            }
        }
        return fragments.join(args[key]);
    };
    Drupal.t = function(str, args, options) {
        options = options || {};
        options.context = options.context || '';
        if (typeof drupalTranslations !== 'undefined' && drupalTranslations.strings && drupalTranslations.strings[options.context] && drupalTranslations.strings[options.context][str]) {
            str = drupalTranslations.strings[options.context][str];
        }
        if (args) {
            str = Drupal.formatString(str, args);
        }
        return str;
    };
    Drupal.url = function(path) {
        return drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + path;
    };
    Drupal.url.toAbsolute = function(url) {
        var urlParsingNode = document.createElement('a');
        try {
            url = decodeURIComponent(url);
        } catch (e) {}
        urlParsingNode.setAttribute('href', url);
        return urlParsingNode.cloneNode(false).href;
    };
    Drupal.url.isLocal = function(url) {
        var absoluteUrl = Drupal.url.toAbsolute(url);
        var protocol = window.location.protocol;
        if (protocol === 'http:' && absoluteUrl.indexOf('https:') === 0) {
            protocol = 'https:';
        }
        var baseUrl = "".concat(protocol, "//").concat(window.location.host).concat(drupalSettings.path.baseUrl.slice(0, -1));
        try {
            absoluteUrl = decodeURIComponent(absoluteUrl);
        } catch (e) {}
        try {
            baseUrl = decodeURIComponent(baseUrl);
        } catch (e) {}
        return absoluteUrl === baseUrl || absoluteUrl.indexOf("".concat(baseUrl, "/")) === 0;
    };
    Drupal.formatPlural = function(count, singular, plural, args, options) {
        args = args || {};
        args['@count'] = count;
        var pluralDelimiter = drupalSettings.pluralDelimiter;
        var translations = Drupal.t(singular + pluralDelimiter + plural, args, options).split(pluralDelimiter);
        var index = 0;
        if (typeof drupalTranslations !== 'undefined' && drupalTranslations.pluralFormula) {
            index = count in drupalTranslations.pluralFormula ? drupalTranslations.pluralFormula[count] : drupalTranslations.pluralFormula.default;
        } else if (args['@count'] !== 1) {
            index = 1;
        }
        return translations[index];
    };
    Drupal.encodePath = function(item) {
        return window.encodeURIComponent(item).replace(/%2F/g, '/');
    };
    Drupal.deprecationError = function(_ref) {
        var message = _ref.message;
        if (drupalSettings.suppressDeprecationErrors === false && typeof console !== 'undefined' && console.warn) {
            console.warn("[Deprecation] ".concat(message));
        }
    };
    Drupal.deprecatedProperty = function(_ref2) {
        var target = _ref2.target,
            deprecatedProperty = _ref2.deprecatedProperty,
            message = _ref2.message;
        if (!Proxy || !Reflect) {
            return target;
        }
        return new Proxy(target, {
            get: function get(target, key) {
                if (key === deprecatedProperty) {
                    Drupal.deprecationError({
                        message: message
                    });
                }
                for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                    rest[_key - 2] = arguments[_key];
                }
                return Reflect.get.apply(Reflect, [target, key].concat(rest));
            }
        });
    };
    Drupal.theme = function(func) {
        if (func in Drupal.theme) {
            var _Drupal$theme;
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
            }
            return (_Drupal$theme = Drupal.theme)[func].apply(_Drupal$theme, args);
        }
    };
    Drupal.theme.placeholder = function(str) {
        return "<em class=\"placeholder\">".concat(Drupal.checkPlain(str), "</em>");
    };
})(Drupal, window.drupalSettings, window.drupalTranslations, window.console, window.Proxy, window.Reflect);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
if (window.jQuery) {
    jQuery.noConflict();
}
document.documentElement.className += ' js';
(function(Drupal, drupalSettings) {
    var domReady = function domReady(callback) {
        var listener = function listener() {
            callback();
            document.removeEventListener('DOMContentLoaded', listener);
        };
        if (document.readyState !== 'loading') {
            setTimeout(callback, 0);
        } else {
            document.addEventListener('DOMContentLoaded', listener);
        }
    };
    domReady(function() {
        Drupal.attachBehaviors(document, drupalSettings);
    });
})(Drupal, window.drupalSettings);
;
!function(o) {
    "use strict";
    Drupal.behaviors.subscribePopUp = {
        attach: function(e, i) {
            o(e).find(".subscribe-popup").once("subscribePopup").each(function() {
                var e = o(".subscribe-popup");
                localStorage.getItem("hasvisited") || (e.addClass("visible"), localStorage.setItem("hasvisited", !0)),
                e.find(".close-button").click(function() {
                    e.removeClass("visible")
                })
            })
        }
    },
    Drupal.behaviors.mainNavigation = {
        attach: function(e, i) {
            o(e).find(".region-mobile-header").once("mainNavigation").each(function() {
                function e() {
                    !0 === i.matches && (a.removeAttr("style"), n.removeClass("mobile-menu-active"), t.removeClass("is-active"), t.attr("aria-expanded", !1), r.attr("aria-expanded", !1))
                }
                var i = window.matchMedia("(min-width: 1024px)"),
                    a = o(".region-navigation"),
                    t = o(".region-mobile-header").find(".hamburger"),
                    n = o("html"),
                    r = a.find(".menu--main");
                t.on("click", function() {
                    a.slideToggle(250),
                    t.toggleClass("is-active"),
                    n.toggleClass("mobile-menu-active"),
                    t.hasClass("is-active") ? (t.attr("aria-expanded", !0), r.attr("aria-expanded", !0)) : (t.attr("aria-expanded", !1), r.attr("aria-expanded", !1))
                });
                e(),
                i.addListener(e)
            })
        }
    },
    Drupal.behaviors.searchForm = {
        attach: function(e, i) {
            o(e).find(".search-block-form").once("searchForm").each(function() {
                var e = o(".search-button");
                e.each(function(e) {
                    o(this).attr("aria-expanded", !1);
                    var i = o(this).closest(".region").find(".search-block-form"),
                        a = i.attr("id");
                    i.attr("aria-controls", a)
                }),
                e.on("click", function(e) {
                    e.preventDefault();
                    var i = o(this),
                        a = i.closest(".region").find(".search-block-form");
                    i.addClass("visually-hidden"),
                    a.slideDown(250, function() {
                        i.toggleClass("open"),
                        i.hasClass("open") ? (a.find("input[type='text']").focus(), i.attr("aria-expanded", !0), a.attr("aria-expanded", !0)) : (i.attr("aria-expanded", !1), a.attr("aria-expanded", !1))
                    })
                })
            })
        }
    },
    Drupal.behaviors.virtualArthouseCarousel = {
        attach: function(e, i) {
            o(e).find(".virtual-arthouse-carousel").once("virtualArthouseCarousel").each(function() {
                new Swiper(".virtual-arthouse-carousel", {
                    slidesPerView: 1,
                    spaceBetween: 20,
                    allowTouchMove: !0,
                    simulateTouch: !1,
                    breakpoints: {
                        320: {
                            slidesPerView: "auto",
                            loopedSlides: 1,
                            centeredSlides: !0,
                            loop: !0
                        },
                        768: {
                            slidesPerView: 3,
                            slidesPerGroup: 3,
                            spaceBetween: 20,
                            centeredSlides: !1,
                            loop: !1,
                            centerInsufficientSlides: !0
                        },
                        1024: {
                            slidesPerView: 5,
                            slidesPerGroup: 5,
                            centeredSlides: !1,
                            loop: !1,
                            centerInsufficientSlides: !0
                        },
                        1300: {
                            slidesPerView: 6,
                            slidesPerGroup: 6,
                            centeredSlides: !1,
                            loop: !1,
                            centerInsufficientSlides: !0
                        }
                    },
                    navigation: {
                        nextEl: ".swiper-button-next",
                        prevEl: ".swiper-button-prev"
                    }
                })
            })
        }
    },
    Drupal.behaviors.stickySidebar = {
        attach: function(e, i) {
            o(e).find(".sticky-inner-wrapper").once("stickySidebar").each(function() {
                new StickySidebar(".region-sidebar-first-sticky", {
                    topSpacing: 30,
                    bottomSpacing: 30,
                    containerSelector: ".sticky-sidebar",
                    innerWrapperSelector: ".sticky-inner-wrapper",
                    resizeSensor: !1
                })
            })
        }
    },
    Drupal.behaviors.relatedContent = {
        attach: function(e, i) {
            o(e).find(".related-content").once("relatedContent").each(function() {
                var e = o(".related-content"),
                    i = o(".block-views-blockcontent-recent-block-1 .views-row"),
                    a = e.find(".views-row").length;
                a < 3 && (i = i.slice(0, 3 - a), e.find(".view-content").append(i)),
                e.find(".visually-hidden").removeClass("visually-hidden"),
                e.find(".loading-icon").hide()
            })
        }
    },
    Drupal.behaviors.shareLinks = {
        attach: function(e, i) {
            o(e).find(".share-link").once("shareLinks").each(function() {
                o(".share-link").unbind().click(function(e) {
                    var i;
                    document.execCommand("copy") && (e.preventDefault(), e = o(this).attr("href"), i = o("<input>"), o("body").append(i), i.val("https://screenslate.com" + e).select(), document.execCommand("copy"), i.remove(), o(this).addClass("copied").html("Link copied"))
                })
            })
        }
    }
}(jQuery);
;

